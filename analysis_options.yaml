# Configura o analisador que verifica estaticamente o código Dart
# para erros, warnings e lints.
#
# Os problemas identificados são mostrados em IDEs com suporte a Dart
# e podem ser verificados via comando `flutter analyze`.

# Ativa o conjunto de lints recomendados para projetos Flutter
include: package:flutter_lints/flutter.yaml

analyzer:
  # Configurações adicionais para o analisador
  strong-mode:
    implicit-casts: false
    implicit-dynamic: false

linter:
  # Customização das regras de lint
  rules:
    # Regra para priorizar imports relativos quando aplicável
    prefer_relative_imports: true
    
    # Outras regras recomendadas para Flutter
    avoid_empty_else: true
    avoid_print: true          # Desencoraja o uso de print() em produção
    avoid_redundant_argument_values: true
    avoid_renaming_method_parameters: true
    avoid_return_types_on_setters: true
    avoid_unused_constructor_parameters: true
    cancel_subscriptions: true
    close_sinks: true
    comment_references: true
    constant_identifier_names: true
    control_flow_in_finally: true
    directives_ordering: true
    empty_catches: true
    empty_constructor_bodies: true
    library_names: true
    library_prefixes: true
    no_duplicate_case_values: true
    null_closures: true
    overridden_fields: true
    package_api_docs: true
    package_prefixed_library_names: true
    prefer_final_fields: true
    prefer_is_empty: true
    prefer_is_not_empty: true
    slash_for_doc_comments: true
    test_types_in_equals: true
    throw_in_finally: true
    type_init_formals: true
    unnecessary_brace_in_string_interps: true
    unnecessary_const: true
    unnecessary_new: true
    unnecessary_null_in_if_null_operators: true
    unnecessary_overrides: true
    unnecessary_this: true
    use_function_type_syntax_for_parameters: true
    use_rethrow_when_possible: true
    use_setters_to_change_properties: true
    use_string_buffers: true
    valid_regexps: true
